{"version":3,"sources":["Header.js","Show.js","Timer.js","Maze.js","MazeAnswer.js","KeyBoard.js","Select.js","App.js","reportWebVitals.js","index.js"],"names":["Header","React","Component","rowStyle","height","pointStyle","width","border","display","boxsizing","lineheight","Show","props","data","this","answerData","answer","showAnswer","rowIndex","colIndex","answerShow","answerIndex","length","className","map","row","style","point","road","xIndex","yIndex","backgroundColor","Timer","start","state","timer","setInterval","update","setState","stop","clearInterval","reset","hours","minutes","seconds","time","parseInt","toText","slice","timerUse","resetTimer","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","bind","onClick","id","size","DIRECTIONS","Maze","xSize","ySize","maze","Array","edgeArray","direction","nextXIndex","nextYIndex","judgeEdge","digableDirections","judgeCount","observingDirectionIndex","excludeDirection","judgeDirections","push","getMovableDirections","isDigable","digableDirection","nextPoint","hasDigableRoads","directions","Math","floor","random","digRoad","nextRestartPoint","getRestartPoint","candidateRestartPoint","GOAL","createMaze","result","digMaze","MazeAnswer","mazeSize","mazeData","startPoint","verifyPoint","availableRoads","routes","meetingTermsRoute","routesPattern","routeIndex","getMeetingTermsRoute","branchPoints","branchPointIndex","getAvailableRoads","retensionRoute","getRouteToBranch","hasRoads","branchPoint","getBranchPoint","getStartPoint","getRoutes","mode","copyMaze","JSON","parse","stringify","START","allRoutes","pattern","answerRoute","KeyBoard","handleShowMazeAnswer","handleResetMaze","newMazeData","digGoal","newAnswerData","getAnswerRoute","getReset","keyDownAction","e","key","nextXPoint","nextYPoint","Select","handleSizeChange","target","value","handleModeChange","prevState","onChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2220227c.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return <header>迷路ゲーム</header>;\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nconst rowStyle = {\n  height: 12,\n};\n\nconst pointStyle = {\n  width: 12,\n  height: 12,\n  border: \"solid 1px gray\",\n  display: \"inline-block\",\n  boxsizing: \"border-box\",\n  lineheight: \"12px\",\n};\n\nconst X = 0;\nconst Y = 1;\n\nclass Show extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const data = this.props.data;\n    const answerData = this.props.answer;\n    const showAnswer = (rowIndex, colIndex, answerShow) => {\n      if (answerShow === 0) {\n        return false;\n      }\n      for (\n        let answerIndex = 0;\n        answerIndex < answerData.length;\n        answerIndex++\n      ) {\n        if (\n          answerData[answerIndex][X] === rowIndex &&\n          answerData[answerIndex][Y] === colIndex\n        ) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    return (\n      <div className=\"Show\">\n        <div>\n          {data.map((row, rowIndex) => {\n            return (\n              <div style={rowStyle} key={`row:${rowIndex}`}>\n                {row.map((point, colIndex) => {\n                  const road = point;\n                  return (\n                    <button\n                      key={`row:${rowIndex},col:${colIndex}`}\n                      className={\n                        rowIndex === this.props.xIndex &&\n                        colIndex === this.props.yIndex\n                          ? \"start\"\n                          : \"\"\n                      }\n                      style={{\n                        ...pointStyle,\n                        backgroundColor: road\n                          ? showAnswer(\n                              rowIndex,\n                              colIndex,\n                              this.props.answerShow\n                            )\n                            ? \"skyblue\"\n                            : \"\"\n                          : \"black\",\n                      }}\n                    ></button>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Show;\n","import React from \"react\";\nimport Show from \"./Show\";\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hours: \"00\",\n      minutes: \"00\",\n      seconds: \"00\",\n      time: 0,\n      timer: \"startingPoint\",\n    };\n    this.timerUse = this.timerUse.bind(this);\n  }\n\n  start = () => {\n    if (this.state.timer !== \"stop\") {\n      this.timer = setInterval(() => this.update(), 1000);\n      this.setState({\n        timer: \"start\",\n      });\n    }\n  };\n\n  stop = () => {\n    clearInterval(this.timer);\n    if (this.state.timer === \"pause\") {\n      this.setState({\n        timer: \"start\",\n      });\n      return;\n    }\n    if (this.state.timer !== \"stop\") {\n      this.setState({\n        timer: \"pause\",\n      });\n    }\n  };\n\n  reset = () => {\n    if (this.props.reset === 1) {\n      this.setState({\n        hours: \"00\",\n        minutes: \"00\",\n        seconds: \"00\",\n        time: 0,\n      });\n    }\n  };\n\n  update = () => {\n    const time = this.state.time + 1;\n    const hours = parseInt(time / 60 / 60, 10);\n    const minutes = parseInt((time / 60) % 60, 10);\n    const seconds = parseInt(time % 60, 10);\n    this.setState({\n      hours: this.toText(hours),\n      minutes: this.toText(minutes),\n      seconds: this.toText(seconds),\n      time: time,\n    });\n  };\n\n  toText = (time) => {\n    return (\"00\" + time).slice(-2);\n  };\n\n  timerUse = () => {\n    if (this.props.xIndex === 0) {\n      this.stop();\n      this.setState({\n        timer: \"stop\",\n      });\n    }\n  };\n\n  resetTimer = () => {\n    this.reset();\n  };\n\n  componentDidMount = () => {\n    document.addEventListener(\"keydown\", this.timerUse);\n    document.addEventListener(\"onchange\", this.resetTimer);\n  };\n  componentWillUnmount = () => {\n    document.removeEventListener(\"keydown\", this.timerUse);\n  };\n\n  render() {\n    return (\n      <div>\n        <h5>〈〈 Timer 〉〉</h5>\n        <button className=\"startbutton\" onClick={this.start}>\n          START\n        </button>\n        <button className=\"stopbutton\" onClick={this.stop}>\n          STOP\n        </button>\n        <div id=\"showTimer\">\n          <h5>\n            {this.state.hours} : {this.state.minutes} : {this.state.seconds}\n          </h5>\n        </div>\n        <Show\n          data={this.props.data}\n          answer={this.props.answer}\n          answerShow={this.props.answerShow}\n          size={this.props.size}\n          xIndex={this.props.xIndex}\n          yIndex={this.props.yIndex}\n          timer={this.state.timer}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","const DIRECTION = 4;\n\nconst X = 0;\nconst Y = 1;\n\nconst DIRECTIONS = [\n  [0, -1],\n  [1, 0],\n  [0, 1],\n  [-1, 0],\n];\n\nexport default class Maze {\n  constructor(size) {\n    this.xSize = size;\n    this.ySize = size;\n  }\n\n  createMaze() {\n    let maze = new Array(this.xSize);\n    for (let xIndex = 0; xIndex < this.xSize; xIndex++) {\n      maze[xIndex] = new Array(this.ySize);\n      for (let yIndex = 0; yIndex < this.ySize; yIndex++) {\n        maze[xIndex][yIndex] = false;\n      }\n    }\n    maze[this.xSize - 2][1] = true;\n    return maze;\n  }\n\n  judgeEdge(xIndex, yIndex) {\n    let edgeArray = [0, this.ySize - 1, this.xSize - 1, 0];\n    for (let direction = 0; direction < DIRECTION; direction++) {\n      if (\n        (direction % 2 === 0 && xIndex === edgeArray[direction]) ||\n        (direction % 2 === 1 && yIndex === edgeArray[direction])\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  judgeDirections(xIndex, yIndex, direction, maze) {\n    let nextXIndex = xIndex + DIRECTIONS[direction][X];\n    let nextYIndex = yIndex + DIRECTIONS[direction][Y];\n    if (\n      maze[nextXIndex][nextYIndex] === false &&\n      this.judgeEdge(nextXIndex, nextYIndex)\n    ) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * ある地点の座標について, その地点からまだ進める方向を格納した配列を返す\n   * @param  xIndex その時点でのx座標\n   * @param  yIndex その時点でのy座標\n   * @param  maze 迷路の配列\n   * @returns 配列(進める方向)\n   */\n  getMovableDirections(xIndex, yIndex, maze) {\n    let digableDirections = [];\n    for (let direction = 0; direction < DIRECTION; direction++) {\n      let judgeCount = 0;\n      for (\n        let observingDirectionIndex = 0;\n        observingDirectionIndex < DIRECTION;\n        observingDirectionIndex++\n      ) {\n        let excludeDirection = (observingDirectionIndex + 2) % 4;\n        if (this.judgeDirections(xIndex, yIndex, direction, maze)) {\n          let nextXIndex =\n            xIndex + DIRECTIONS[direction][X] + DIRECTIONS[excludeDirection][X];\n          let nextYIndex =\n            yIndex + DIRECTIONS[direction][Y] + DIRECTIONS[excludeDirection][Y];\n          if (!maze[nextXIndex][nextYIndex]) {\n            judgeCount++;\n          }\n        }\n      }\n      if (judgeCount === 3) {\n        digableDirections.push(direction);\n      }\n    }\n    return digableDirections;\n  }\n\n  isDigable(xIndex, yIndex, maze) {\n    if (\n      maze[xIndex][yIndex] &&\n      this.getMovableDirections(xIndex, yIndex, maze).length !== 0\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  hasDigableRoads(maze) {\n    for (let xIndex = 1; xIndex < this.xSize - 1; xIndex++) {\n      for (let yIndex = 1; yIndex < this.ySize - 1; yIndex++) {\n        if (this.isDigable(xIndex, yIndex, maze)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  digRoad(xIndex, yIndex, digableDirection, maze) {\n    let nextPoint = [];\n    nextPoint[X] = xIndex + DIRECTIONS[digableDirection][X];\n    nextPoint[Y] = yIndex + DIRECTIONS[digableDirection][Y];\n    maze[nextPoint[X]][nextPoint[Y]] = true;\n    return nextPoint;\n  }\n\n  digMaze(maze) {\n    let xIndex = this.xSize - 2;\n    let yIndex = 1;\n    while (this.hasDigableRoads(maze)) {\n      let directions = this.getMovableDirections(xIndex, yIndex, maze);\n      if (directions.length > 0) {\n        let digableDirection = Math.floor(Math.random() * directions.length);\n        let nextPoint = this.digRoad(\n          xIndex,\n          yIndex,\n          directions[digableDirection],\n          maze\n        );\n        if (nextPoint.length > 0) {\n          xIndex = nextPoint[X];\n          yIndex = nextPoint[Y];\n        }\n      } else if (directions.length === 0) {\n        let nextRestartPoint = this.getRestartPoint(maze);\n        if (nextRestartPoint !== 0) {\n          xIndex = nextRestartPoint[X];\n          yIndex = nextRestartPoint[Y];\n        }\n      }\n    }\n    return maze;\n  }\n\n  getRestartPoint(maze) {\n    let nextRestartPoint = [];\n    for (let xIndex = 1; xIndex < this.xSize - 1; xIndex++) {\n      for (let yIndex = 1; yIndex < this.ySize - 1; yIndex++) {\n        if (maze[xIndex][yIndex]) {\n          if (this.getMovableDirections(xIndex, yIndex, maze).length > 0) {\n            let candidateRestartPoint = [xIndex, yIndex];\n            nextRestartPoint.push(candidateRestartPoint);\n            break;\n          }\n        }\n      }\n    }\n    if (nextRestartPoint.length > 0) {\n      let restartPointIndex = Math.floor(\n        Math.random() * nextRestartPoint.length\n      );\n      return nextRestartPoint[restartPointIndex];\n    }\n    return 0;\n  }\n\n  digGoal() {\n    const GOAL = [1, this.ySize - 2];\n    let maze = this.createMaze();\n    let result = this.digMaze(maze);\n    while (!maze[GOAL[X]][GOAL[Y]]) {\n      maze = this.createMaze();\n      result = this.digMaze(maze);\n    }\n    result[this.xSize - 1][1] = true;\n    result[0][this.ySize - 2] = true;\n    return result;\n  }\n}\n","const DIRECTION = 4;\n\nconst X = 0;\nconst Y = 1;\n\nconst REACHMODE = 1;\nconst LONGESTMODE = 2;\n\nconst DIRECTIONS = [\n  [0, -1],\n  [1, 0],\n  [0, 1],\n  [-1, 0],\n];\n\nexport default class MazeAnswer {\n  constructor(maze, mazeSize) {\n    this.mazeSize = mazeSize;\n    this.mazeData = maze;\n  }\n\n  getAvailableRoads(maze, startPoint) {\n    for (let direction = 0; direction < DIRECTION; direction++) {\n      let nextPoint = [\n        startPoint[X] + DIRECTIONS[direction][X],\n        startPoint[Y] + DIRECTIONS[direction][Y],\n      ];\n      if (maze[nextPoint[X]][nextPoint[Y]]) {\n        return nextPoint;\n      }\n    }\n    return false;\n  }\n\n  hasRoads(maze) {\n    for (let xIndex = 0; xIndex < this.mazeSize; xIndex++) {\n      for (let yIndex = 0; yIndex < this.mazeSize; yIndex++) {\n        if (maze[xIndex][yIndex]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  getBranchPoint(maze, verifyPoint) {\n    if (verifyPoint === false) {\n      return false;\n    }\n    let availableRoads = 0;\n    for (let direction = 0; direction < DIRECTION; direction++) {\n      let nextPoint = [\n        verifyPoint[X] + DIRECTIONS[direction][X],\n        verifyPoint[Y] + DIRECTIONS[direction][Y],\n      ];\n      if (maze[nextPoint[X]][nextPoint[Y]]) {\n        availableRoads++;\n      }\n    }\n    return availableRoads > 1 ? verifyPoint : false;\n  }\n\n  getMeetingTermsRoute(routes, startPoint) {\n    let meetingTermsRoute = routes[0];\n    for (\n      let routesPattern = 1;\n      routesPattern < routes.length;\n      routesPattern++\n    ) {\n      for (\n        let routeIndex = 0;\n        routeIndex < routes[routesPattern].length;\n        routeIndex++\n      ) {\n        if (routes[routesPattern][routeIndex] === startPoint) {\n          meetingTermsRoute = routes[routesPattern];\n        }\n      }\n    }\n    return meetingTermsRoute;\n  }\n\n  getRouteToBranch(startPoint, routes) {\n    if (routes.length === 0) {\n      return [startPoint];\n    }\n    let meetingTermsRoute = this.getMeetingTermsRoute(routes, startPoint);\n    for (\n      let routeIndex = meetingTermsRoute.length - 1;\n      routeIndex >= 0;\n      routeIndex--\n    ) {\n      if (meetingTermsRoute[routeIndex] === startPoint) {\n        return meetingTermsRoute.slice(0, routeIndex + 1);\n      }\n    }\n    return [startPoint];\n  }\n\n  getStartPoint(maze, branchPoints) {\n    for (\n      let branchPointIndex = branchPoints.length - 1;\n      branchPointIndex >= 0;\n      branchPointIndex--\n    ) {\n      if (\n        this.getAvailableRoads(maze, branchPoints[branchPointIndex]) !== false\n      ) {\n        return branchPoints[branchPointIndex];\n      }\n    }\n  }\n\n  getRoutes(maze, startPoint, routes, branchPoints) {\n    let retensionRoute = this.getRouteToBranch(startPoint, routes);\n    while (this.hasRoads(maze)) {\n      let nextPoint = this.getAvailableRoads(maze, startPoint);\n      let branchPoint = this.getBranchPoint(maze, startPoint);\n      if (branchPoint !== false) {\n        branchPoints.push(branchPoint);\n      }\n      maze[startPoint[X]][startPoint[Y]] = false;\n      if (nextPoint === false) {\n        if (retensionRoute.length !== 0) {\n          routes.push(retensionRoute);\n        }\n        startPoint = this.getStartPoint(maze, branchPoints);\n        return this.getRoutes(maze, startPoint, routes, branchPoints);\n      }\n      retensionRoute.push(nextPoint);\n      startPoint = nextPoint;\n    }\n    return routes;\n  }\n\n  getAnswerRoute(mode) {\n    let copyMaze = JSON.parse(JSON.stringify(this.mazeData));\n    copyMaze[this.mazeSize - 1][1] = false;\n    copyMaze[0][this.mazeSize - 2] = false;\n    const START = [this.mazeSize - 2, 1];\n    const GOAL = [1, this.mazeSize - 2];\n    let routes = [];\n    let branchPoints = [];\n    let allRoutes = this.getRoutes(copyMaze, START, routes, branchPoints);\n\n    if (mode === REACHMODE) {\n      for (let pattern = 0; pattern < allRoutes.length; pattern++) {\n        for (\n          let routeIndex = 0;\n          routeIndex < allRoutes[pattern].length;\n          routeIndex++\n        ) {\n          if (\n            allRoutes[pattern][routeIndex][X] === GOAL[X] &&\n            allRoutes[pattern][routeIndex][Y] === GOAL[Y]\n          ) {\n            let answerRoute = allRoutes[pattern].slice(0, routeIndex + 1);\n            return answerRoute;\n          }\n        }\n      }\n    }\n\n    if (mode === LONGESTMODE) {\n      let answerRoute = allRoutes[0];\n      for (let pattern = 1; pattern < allRoutes.length; pattern++) {\n        if (answerRoute.length < allRoutes[pattern].length) {\n          answerRoute = allRoutes[pattern];\n        }\n      }\n      return answerRoute;\n    }\n  }\n}\n","import React from \"react\";\nimport Timer from \"./Timer\";\nimport Maze from \"./Maze\";\nimport MazeAnswer from \"./MazeAnswer\";\n\nconst ON = 1;\nconst OFF = 0;\n\nclass KeyBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    const maze = new Maze(this.props.size);\n    const mazeData = maze.digGoal();\n    const answer = new MazeAnswer(mazeData, this.props.size);\n    const answerData = answer.getAnswerRoute(this.props.mode);\n    this.state = {\n      data: mazeData,\n      answer: answerData,\n      answerShow: OFF,\n      reset: 0,\n      xIndex: this.props.size - 1,\n      yIndex: 1,\n    };\n    this.handleShowMazeAnswer = this.handleShowMazeAnswer.bind(this);\n    this.handleResetMaze = this.handleResetMaze.bind(this);\n    this.keyDownAction = this.keyDownAction.bind(this);\n  }\n\n  handleShowMazeAnswer = () => {\n    if (this.state.answerShow === ON) {\n      this.setState({\n        answerShow: OFF,\n      });\n      return;\n    }\n    this.setState({\n      answerShow: ON,\n    });\n  };\n\n  handleResetMaze = () => {\n    const newMaze = new Maze(this.props.size);\n    const newMazeData = newMaze.digGoal();\n    const newAnswer = new MazeAnswer(newMazeData, this.props.size);\n    const newAnswerData = newAnswer.getAnswerRoute(this.props.mode);\n\n    this.setState({\n      data: newMazeData,\n      answer: newAnswerData,\n      answerShow: OFF,\n      xIndex: this.props.size - 1,\n      yIndex: 1,\n      reset: this.getReset(),\n    });\n  };\n\n  getReset = () => {\n    if (this.state.reset === 1) {\n      return 0;\n    }\n    if (this.state.reset === 0) {\n      return 0;\n    }\n  };\n\n  keyDownAction = (e) => {\n    let direction = [];\n    if (e.key === \"ArrowUp\" && this.state.xIndex > 0) {\n      direction = [-1, 0];\n    } else if (\n      e.key === \"ArrowRight\" &&\n      this.state.yIndex < this.props.size - 1\n    ) {\n      direction = [0, 1];\n    } else if (\n      e.key === \"ArrowDown\" &&\n      this.state.xIndex < this.props.size - 1\n    ) {\n      direction = [1, 0];\n    } else if (e.key === \"ArrowLeft\" && this.state.yIndex > 0) {\n      direction = [0, -1];\n    } else {\n      direction = [0, 0];\n    }\n\n    const nextXPoint = this.state.xIndex + direction[0];\n    const nextYPoint = this.state.yIndex + direction[1];\n    let nextPoint = [];\n    if (this.state.data[nextXPoint][nextYPoint]) {\n      nextPoint = [nextXPoint, nextYPoint];\n    } else if (!this.state.data[nextXPoint][nextYPoint]) {\n      nextPoint = [this.state.xIndex, this.state.yIndex];\n    }\n    this.setState({\n      xIndex: nextPoint[0],\n      yIndex: nextPoint[1],\n    });\n  };\n\n  componentDidMount = () => {\n    document.addEventListener(\"keydown\", this.keyDownAction);\n  };\n  componentWillUnmount = () => {\n    document.removeEventListener(\"keydown\", this.keyDownAction);\n  };\n\n  render() {\n    return (\n      <div className=\"keyboard\">\n        <button className=\"resetbutton\" onClick={this.handleResetMaze}>\n          作成\n        </button>\n        <Timer\n          data={this.state.data}\n          answer={this.state.answer}\n          answerShow={this.state.answerShow}\n          size={this.props.size}\n          xIndex={this.state.xIndex}\n          yIndex={this.state.yIndex}\n          reset={this.state.reset}\n        />\n        <h4>\n          モード {this.props.mode}\n          <br />\n          迷路サイズは {this.props.size} × {this.props.size} です\n        </h4>\n        <button className=\"answerbutton\" onClick={this.handleShowMazeAnswer}>\n          迷路の解答\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default KeyBoard;\n","import React from \"react\";\nimport KeyBoard from \"./KeyBoard\";\n\nclass Select extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      size: 10,\n      mode: 1,\n    };\n    this.handleSizeChange = this.handleSizeChange.bind(this);\n    this.handleModeChange = this.handleModeChange.bind(this);\n  }\n\n  handleSizeChange = (e) => {\n    this.setState({\n      size: e.target.value,\n    });\n  };\n\n  handleModeChange = (e) => {\n    this.setState((prevState) => {\n      prevState.mode = e.target.value;\n      return { mode: prevState.mode };\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>迷路オプション</h3>\n        <ul className=\"list\">\n          <li>\n            迷路サイズ:{\" \"}\n            <select className=\"selectSize\" onChange={this.handleSizeChange}>\n              <option value=\"\">--サイズ選択--</option>\n              <option value=\"10\">10 × 10</option>\n              <option value=\"20\">20 × 20</option>\n              <option value=\"30\">30 × 30</option>\n              <option value=\"40\">40 × 40</option>\n              <option value=\"50\">50 × 50</option>\n            </select>\n          </li>\n          <li>\n            モード選択:{\" \"}\n            <select className=\"selectMode\" onChange={this.handleModeChange}>\n              <option value=\"\">--モードを選択--</option>\n              <option value=\"1\">到達モード ⇨ モード1</option>\n              <option value=\"2\">最長モード　→　モード2</option>\n            </select>\n          </li>\n        </ul>\n        <br />\n        <KeyBoard size={this.state.size} mode={this.state.mode} />\n      </div>\n    );\n  }\n}\n\nexport default Select;\n","import React from \"react\";\nimport Select from \"./Select\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Select />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Header from \"./Header\";\nimport App from \"./App\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}